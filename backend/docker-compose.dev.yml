version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ai_trading_postgres
    environment:
      POSTGRES_DB: ai_trading_platform
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - ai_trading_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d ai_trading_platform"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: ai_trading_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ai_trading_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai_trading_backend
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/ai_trading_platform
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=your-secret-key-here
      - STRIPE_SECRET_KEY=your-stripe-secret-key
      - STRIPE_PUBLISHABLE_KEY=your-stripe-publishable-key
      - ENVIRONMENT=development
    ports:
      - "8000:8000"
    volumes:
      - .:/app
      - /app/__pycache__
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ai_trading_network
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        python -c 'import time; time.sleep(10)' &&
        echo 'Running database migrations...' &&
        alembic upgrade head &&
        echo 'Initializing database...' &&
        python scripts/init_db.py &&
        echo 'Starting server...' &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # pgAdmin for database management (optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: ai_trading_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@aitrading.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - ai_trading_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  ai_trading_network:
    driver: bridge